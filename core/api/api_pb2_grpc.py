# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import api_pb2 as api__pb2
import grpc


class APIStub(object):
    """*Id and *Slug cause compilation errors, so using *I and *S instead"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UserSlug = channel.unary_unary(
            "/metropolis.API/UserSlug",
            request_serializer=api__pb2.UserS.SerializeToString,
            response_deserializer=api__pb2.User.FromString,
        )
        self.UserMe = channel.unary_unary(
            "/metropolis.API/UserMe",
            request_serializer=api__pb2.Nothing.SerializeToString,
            response_deserializer=api__pb2.User.FromString,
        )
        self.Users = channel.unary_unary(
            "/metropolis.API/Users",
            request_serializer=api__pb2.Nothing.SerializeToString,
            response_deserializer=api__pb2.UsersResp.FromString,
        )
        self.Tags = channel.unary_unary(
            "/metropolis.API/Tags",
            request_serializer=api__pb2.Nothing.SerializeToString,
            response_deserializer=api__pb2.TagsResp.FromString,
        )
        self.AnnouncementId = channel.unary_unary(
            "/metropolis.API/AnnouncementId",
            request_serializer=api__pb2.AnnouncementI.SerializeToString,
            response_deserializer=api__pb2.Announcement.FromString,
        )
        self.AnnouncementsMe = channel.unary_unary(
            "/metropolis.API/AnnouncementsMe",
            request_serializer=api__pb2.Nothing.SerializeToString,
            response_deserializer=api__pb2.AnnouncementsResp.FromString,
        )
        self.Announcements = channel.unary_unary(
            "/metropolis.API/Announcements",
            request_serializer=api__pb2.Nothing.SerializeToString,
            response_deserializer=api__pb2.AnnouncementsResp.FromString,
        )
        self.OrgSlug = channel.unary_unary(
            "/metropolis.API/OrgSlug",
            request_serializer=api__pb2.OrgS.SerializeToString,
            response_deserializer=api__pb2.Org.FromString,
        )
        self.Orgs = channel.unary_unary(
            "/metropolis.API/Orgs",
            request_serializer=api__pb2.Nothing.SerializeToString,
            response_deserializer=api__pb2.OrgsResp.FromString,
        )
        self.EventId = channel.unary_unary(
            "/metropolis.API/EventId",
            request_serializer=api__pb2.EventI.SerializeToString,
            response_deserializer=api__pb2.Event.FromString,
        )
        self.Events = channel.unary_unary(
            "/metropolis.API/Events",
            request_serializer=api__pb2.Nothing.SerializeToString,
            response_deserializer=api__pb2.EventsResp.FromString,
        )
        self.TermId = channel.unary_unary(
            "/metropolis.API/TermId",
            request_serializer=api__pb2.TermI.SerializeToString,
            response_deserializer=api__pb2.Term.FromString,
        )
        self.Terms = channel.unary_unary(
            "/metropolis.API/Terms",
            request_serializer=api__pb2.Nothing.SerializeToString,
            response_deserializer=api__pb2.TermsResp.FromString,
        )
        self.Timetables = channel.unary_unary(
            "/metropolis.API/Timetables",
            request_serializer=api__pb2.Nothing.SerializeToString,
            response_deserializer=api__pb2.TimetablesResp.FromString,
        )
        self.Meta = channel.unary_unary(
            "/metropolis.API/Meta",
            request_serializer=api__pb2.Nothing.SerializeToString,
            response_deserializer=api__pb2.MetaInfo.FromString,
        )


class APIServicer(object):
    """*Id and *Slug cause compilation errors, so using *I and *S instead"""

    def UserSlug(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UserMe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Users(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Tags(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AnnouncementId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AnnouncementsMe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Announcements(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def OrgSlug(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Orgs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def EventId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Events(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def TermId(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Terms(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Timetables(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Meta(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_APIServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "UserSlug": grpc.unary_unary_rpc_method_handler(
            servicer.UserSlug,
            request_deserializer=api__pb2.UserS.FromString,
            response_serializer=api__pb2.User.SerializeToString,
        ),
        "UserMe": grpc.unary_unary_rpc_method_handler(
            servicer.UserMe,
            request_deserializer=api__pb2.Nothing.FromString,
            response_serializer=api__pb2.User.SerializeToString,
        ),
        "Users": grpc.unary_unary_rpc_method_handler(
            servicer.Users,
            request_deserializer=api__pb2.Nothing.FromString,
            response_serializer=api__pb2.UsersResp.SerializeToString,
        ),
        "Tags": grpc.unary_unary_rpc_method_handler(
            servicer.Tags,
            request_deserializer=api__pb2.Nothing.FromString,
            response_serializer=api__pb2.TagsResp.SerializeToString,
        ),
        "AnnouncementId": grpc.unary_unary_rpc_method_handler(
            servicer.AnnouncementId,
            request_deserializer=api__pb2.AnnouncementI.FromString,
            response_serializer=api__pb2.Announcement.SerializeToString,
        ),
        "AnnouncementsMe": grpc.unary_unary_rpc_method_handler(
            servicer.AnnouncementsMe,
            request_deserializer=api__pb2.Nothing.FromString,
            response_serializer=api__pb2.AnnouncementsResp.SerializeToString,
        ),
        "Announcements": grpc.unary_unary_rpc_method_handler(
            servicer.Announcements,
            request_deserializer=api__pb2.Nothing.FromString,
            response_serializer=api__pb2.AnnouncementsResp.SerializeToString,
        ),
        "OrgSlug": grpc.unary_unary_rpc_method_handler(
            servicer.OrgSlug,
            request_deserializer=api__pb2.OrgS.FromString,
            response_serializer=api__pb2.Org.SerializeToString,
        ),
        "Orgs": grpc.unary_unary_rpc_method_handler(
            servicer.Orgs,
            request_deserializer=api__pb2.Nothing.FromString,
            response_serializer=api__pb2.OrgsResp.SerializeToString,
        ),
        "EventId": grpc.unary_unary_rpc_method_handler(
            servicer.EventId,
            request_deserializer=api__pb2.EventI.FromString,
            response_serializer=api__pb2.Event.SerializeToString,
        ),
        "Events": grpc.unary_unary_rpc_method_handler(
            servicer.Events,
            request_deserializer=api__pb2.Nothing.FromString,
            response_serializer=api__pb2.EventsResp.SerializeToString,
        ),
        "TermId": grpc.unary_unary_rpc_method_handler(
            servicer.TermId,
            request_deserializer=api__pb2.TermI.FromString,
            response_serializer=api__pb2.Term.SerializeToString,
        ),
        "Terms": grpc.unary_unary_rpc_method_handler(
            servicer.Terms,
            request_deserializer=api__pb2.Nothing.FromString,
            response_serializer=api__pb2.TermsResp.SerializeToString,
        ),
        "Timetables": grpc.unary_unary_rpc_method_handler(
            servicer.Timetables,
            request_deserializer=api__pb2.Nothing.FromString,
            response_serializer=api__pb2.TimetablesResp.SerializeToString,
        ),
        "Meta": grpc.unary_unary_rpc_method_handler(
            servicer.Meta,
            request_deserializer=api__pb2.Nothing.FromString,
            response_serializer=api__pb2.MetaInfo.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "metropolis.API", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class API(object):
    """*Id and *Slug cause compilation errors, so using *I and *S instead"""

    @staticmethod
    def UserSlug(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/metropolis.API/UserSlug",
            api__pb2.UserS.SerializeToString,
            api__pb2.User.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UserMe(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/metropolis.API/UserMe",
            api__pb2.Nothing.SerializeToString,
            api__pb2.User.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Users(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/metropolis.API/Users",
            api__pb2.Nothing.SerializeToString,
            api__pb2.UsersResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Tags(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/metropolis.API/Tags",
            api__pb2.Nothing.SerializeToString,
            api__pb2.TagsResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AnnouncementId(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/metropolis.API/AnnouncementId",
            api__pb2.AnnouncementI.SerializeToString,
            api__pb2.Announcement.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AnnouncementsMe(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/metropolis.API/AnnouncementsMe",
            api__pb2.Nothing.SerializeToString,
            api__pb2.AnnouncementsResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Announcements(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/metropolis.API/Announcements",
            api__pb2.Nothing.SerializeToString,
            api__pb2.AnnouncementsResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def OrgSlug(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/metropolis.API/OrgSlug",
            api__pb2.OrgS.SerializeToString,
            api__pb2.Org.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Orgs(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/metropolis.API/Orgs",
            api__pb2.Nothing.SerializeToString,
            api__pb2.OrgsResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def EventId(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/metropolis.API/EventId",
            api__pb2.EventI.SerializeToString,
            api__pb2.Event.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Events(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/metropolis.API/Events",
            api__pb2.Nothing.SerializeToString,
            api__pb2.EventsResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def TermId(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/metropolis.API/TermId",
            api__pb2.TermI.SerializeToString,
            api__pb2.Term.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Terms(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/metropolis.API/Terms",
            api__pb2.Nothing.SerializeToString,
            api__pb2.TermsResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Timetables(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/metropolis.API/Timetables",
            api__pb2.Nothing.SerializeToString,
            api__pb2.TimetablesResp.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def Meta(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/metropolis.API/Meta",
            api__pb2.Nothing.SerializeToString,
            api__pb2.MetaInfo.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
