syntax = "proto3";

package metropolis;

import "google/protobuf/timestamp.proto";

// *Id and *Slug cause compilation errors, so using *I and *S instead

service API {
	rpc UserSlug(UserS) returns (User);
	rpc UserMe(Nothing) returns (User);
	rpc Users(Nothing) returns (UsersResp);

	rpc Tags(Nothing) returns (TagsResp);

	rpc AnnouncementId(AnnouncementI) returns (Announcement);
	rpc AnnouncementsMe(Nothing) returns (AnnouncementsResp);
	rpc Announcements(Nothing) returns (AnnouncementsResp);

	rpc OrgSlug(OrgS) returns (Org);
	rpc Orgs(Nothing) returns (OrgsResp);

	rpc EventId(EventI) returns (Event);
	rpc Events(Nothing) returns (EventsResp);

	rpc TermId(TermI) returns (Term);
	rpc Terms(Nothing) returns (TermsResp);

	rpc Timetables(Nothing) returns (TimetablesResp);

	rpc Meta(Nothing) returns (MetaInfo);
}

message UsersResp {
	repeated UserS slugs = 1;
}

message TagsResp {
	repeated Tag tags = 1;
}

message AnnouncementsResp {
	repeated AnnouncementI ids = 1;
}

message OrgsResp {
	repeated OrgS slugs = 1;
}

message EventsResp {
	repeated EventI ids = 1;
}

message TermsResp {
	repeated TermI ids = 1;
}

message TimetablesResp {
	repeated Timetable tables = 1;
}

message MetaInfo {
	string name = 1;
	string srcURL = 2;
	string license = 3;
	string extra = 4;
	Ver ver = 5;
}

message Ver {
	uint32 major = 1;
	uint32 minor = 2;
	uint32 point = 3;
}

// Types

// Convenience

message Nothing {}

message Timeframe {
	google.protobuf.Timestamp start = 1;
	google.protobuf.Timestamp end = 2;
}

// User

message UserS { string slug = 1; }

message User {
	UserS slug = 1; // username
	string firstName = 2;
	string lastName = 3;
	string bio = 4;
	string tz = 5;
	uint32 graduates = 6;
	repeated OrgS orgs = 7;
	repeated Tag following = 8;
}

// Tag

message TagI { int32 id = 1; }

message TagS { string slug = 1; }

message Tag {
	TagI id = 1;
	TagS slug = 2;
	string color = 3;
}

// Ann

message AnnouncementI { int32 id = 1; }

message Announcement {
	AnnouncementI id = 1;
	UserS author = 2;
	OrgS org = 3;
	repeated Tag tags = 4;
	google.protobuf.Timestamp created = 5;
	google.protobuf.Timestamp lastModified = 6;
	string title = 7;
	string body = 8;
	bool public = 9;
}

// Org

message OrgS { string slug = 1; }

message Org {
	OrgS slug = 1;
	UserS owner = 2;
	repeated UserS supervisors = 3;
	repeated UserS execs = 4;
	repeated Tag tags = 5;
	string name = 6;
	string bio = 7;
	string extra = 8;
	google.protobuf.Timestamp created = 9;
	bool membersPublic = 10;
	Openness apply = 11;
	string banner = 12;
	string icon = 13;

	enum Openness {
	ANY = 0;
	APPLY = 1;
	NONE = 2;
	}
}

// Events

message EventI { int32 id = 1; }

message Event {
	EventI id = 1;
	OrgS org = 2;
	repeated TagI tags = 3;
	string name = 4;
	string desc = 5;
	Timeframe frame = 6;
	bool general = 7;
	TermI term = 8;
}

// Term

message TermI { int32 id = 1; }

message Term {
	TermI id = 1;
	string name = 2;
	string desc = 3;
	TermFmt fmt = 4;
	Timeframe frame = 5;
	bool frozen = 6;

	enum TermFmt {
	PRE_2020 = 0;
	COVID = 1;
	WEEK = 2;
	}
}

// Lesson

message Lesson {
	CourseI type = 1;
	Timeframe frame = 2;
	repeated int32 pos = 3;
	string cycle = 4; // TODO: see if CycleSlug or similar makes sense
	CourseI course = 5;
}

// Table

message TableI { int32 id = 1; }

message Table {
	TableI id = 1;
	UserS owner = 2;
	TermI type = 3;
	repeated CourseI courses = 4;
}

// Course

message CourseI { int32 id = 1; }

message Course {
	CourseI id = 1;
	TermI type = 2;
	string code = 3;
	string desc = 4;
	uint32 pos = 5;
	UserS submitter = 6;
}

// Timetable

message TimetableI { int32 id = 1; }

message Timetable {
	TimetableI id = 1;
	// TODO: implement
}
